/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${meta ? "analysis/" + meta.sample + "/" : "" }${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*:PREPARE_REFERENCES:.*' {
        publishDir = [
            path: { "${params.outdir}/references/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: 'MSKCC_FORTE:FORTE:MULTIQC' {
        publishDir = [
            path: { "${report.folder}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QC_DEDUP:MULTIQC_COLLECT' {
        ext.args = {
            [
                "--cl-config \"subtitle: 'Deduplicated Bam'\"",
                "-n dedupbam_multiqc_report"
            ].join(" ")
        }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QC_DUP:MULTIQC_COLLECT' {
        ext.args = {
            [
                "--cl-config \"subtitle: 'Non-deduplicated Bam'\"",
                "-n dupbam_multiqc_report"
            ].join(" ")
        }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QC_DEDUP:MULTIQC' {
        ext.args = {
            [
                "--cl-config \"subtitle: 'Deduplicated Bam'\"",
                "-n dedupbam_multiqc_report"
            ].join(" ")
        }
    }

    withName: '.*:QC_DUP:MULTIQC' {
        ext.args = {
            [
                "--cl-config \"subtitle: 'Non-deduplicated Bam'\"",
                "-n dupbam_multiqc_report"
            ].join(" ")
        }
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: UMITOOLS_EXTRACT {
        ext.args = {
            [
                "--bc-pattern=\"${meta.umi}\"",
                meta.umi2 == "" ? "" : "--bc-pattern2=\"${meta.umi2}\"",
                params.ignore_read_pair_suffixes ? "--ignore-read-pair-suffixes" : ""
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/analysis/${meta.sample}/umitools/extract" },
                mode: params.publish_dir_mode,
                pattern: "*_{1,2}.fastq.gz",
                enabled: false
            ],
            [
                path: { "${params.outdir}/analysis/${meta.sample}/umitools/extract/logs" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                enabled: true
            ]
        ]
    }

    withName: UMITOOLS_DEDUP {
        ext.prefix = { "${meta.id}.dedup" }
        time       = { check_max( 20.h * task.attempt, 'time' ) }
        publishDir = [
            [
                path: { "${params.outdir}/analysis/${meta.id}/umitools/dedup" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: true
            ],
            [
                path: { "${params.outdir}/analysis/${meta.id}/umitools/dedup/logs" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv',
                enabled: true
            ]
        ]
    }

    withName: SAMTOOLS_INDEX_DEDUP {
        publishDir = [
            path: { "${params.outdir}/analysis/${meta.id}/umitools/dedup" },
            mode: params.publish_dir_mode,
            pattern: '*.bai'
        ]
    }

    withName: STAR_GENOMEGENERATE {
        storeDir = { "${params.reference_base}/${params.genome}/star_index" }
    }

    withName: KALLISTO_INDEX {
        storeDir = { "${params.reference_base}/${params.genome}/kallisto" }
    }

    withName: STARFUSION_DOWNLOAD {
        storeDir = { "${params.reference_base}/${params.genome}/starfusion" }
    }

    withName: FUSIONCATCHER_DOWNLOAD {
        storeDir = { "${params.reference_base}/${params.genome}/fusioncatcher" }
    }

    withName: FUSIONREPORT_DOWNLOAD {
        ext.when = ! params.skip_fusion_report
        secret = ["COSMIC_PASSWD"]
        storeDir = { "${params.reference_base}/fusionreport" }
        ext.args = "--cosmic_usr ${params.cosmic_usr} --cosmic_passwd \$COSMIC_PASSWD"
    }

    withName: FUSIONREPORT {
        ext.when = ! params.skip_fusion_report
        ext.args = {
            [
                "-t ${params.fusion_report_cutoff}",
                '--allow-multiple-gene-symbols',
                '--export csv'
            ].join(' ').trim()
        }
    }

    withName: CSV_TO_TSV {
        publishDir = [
            path: { "${params.outdir}/analysis/${meta.id}/fusionreport" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
    }

    withName: AGFUSION_BATCH {
        ext.args = "-a cff_ext --noncanonical --middlestar"
        publishDir = [
            path: { "${params.outdir}/analysis/${meta.id}/agfusion" },
            mode: params.publish_dir_mode,
            pattern: 'fusion_transcripts.csv',
	    enabled: false
        ]
    }

    withName: ONCOKB_FUSIONANNOTATOR {
        ext.when = params.run_oncokb_fusionannotator
        secret = ["ONCOKB_TOKEN"]
        ext.args = "-b \$ONCOKB_TOKEN"
    }

    withName: STAR_FOR_ARRIBA {
        ext.args = {
            [
                "--outSAMattrRGline ID:${meta.sample} SM:${meta.sample} PL:Illumina",
                '--readFilesCommand zcat',
                '--outSAMtype BAM Unsorted',
                '--outSAMunmapped Within',
                '--outBAMcompression 0',
                '--outFilterMultimapNmax 50',
                '--peOverlapNbasesMin 10',
                '--alignSplicedMateMapLminOverLmate 0.5',
                '--alignSJstitchMismatchNmax 5',
                '-1 5 5',
                '--chimSegmentMin 10',
                '--chimOutType WithinBAM HardClip',
                '--chimJunctionOverhangMin 10',
                '--chimScoreDropMax 30',
                '--chimScoreJunctionNonGTAG 0',
                '--chimScoreSeparation 1',
                '--chimSegmentReadGapMax 3',
                '--chimMultimapNmax 50'
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/analysis/${meta.id}/arriba/STAR/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/analysis/${meta.id}/arriba/STAR" },
                mode: params.publish_dir_mode,
                pattern: '*.Aligned.out.bam',
                enabled: false
            ]
        ]
    }

    withName: STAR_FOR_STARFUSION {
        ext.args = {
            [
                "--outSAMattrRGline ID:${meta.sample} SM:${meta.sample} PL:Illumina",
                '--readFilesCommand zcat',
                '--outSAMtype None',
                '--outReadsUnmapped None',
                '--twopassMode Basic',
                '--outSAMstrandField intronMotif',
                '--outSAMunmapped Within',
                '--chimSegmentMin 12',
                '--chimJunctionOverhangMin 8',
                '--chimOutJunctionFormat 1',
                '--alignSJDBoverhangMin 10',
                '--alignMatesGapMax 100000',
                '--alignIntronMax 100000',
                '--alignSJstitchMismatchNmax 5 -1 5 5',
                '--chimMultimapScoreRange 3',
                '--chimScoreJunctionNonGTAG -4',
                '--chimMultimapNmax 20',
                '--chimNonchimScoreDropMin 10',
                '--peOverlapNbasesMin 12',
                '--peOverlapMMp 0.1',
                '--alignInsertionFlush Right',
                '--alignSplicedMateMapLminOverLmate 0',
                '--alignSplicedMateMapLmin 30'
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/analysis/${meta.id}/starfusion/STAR/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/analysis/${meta.id}/starfusion/STAR" },
                mode: params.publish_dir_mode,
                pattern: '*.Chimeric.out.junction'
            ]
        ]

    }

    withName: STAR_ALIGN {
        ext.prefix = { "$meta.sample" }
        ext.args = {
            [
                "--outSAMattrRGline ${meta.read_group.split(",").collect{"ID:${it} SM:${meta.sample} PL:Illumina"}.join(" , ")}",
                '--quantMode GeneCounts',
                '--twopassMode Basic',
                '--outSAMtype BAM SortedByCoordinate',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterMultimapNmax 20',
                '--alignSJDBoverhangMin 1',
                '--outSAMattributes NH HI AS NM MD',
                '--quantTranscriptomeBan Singleend',
                '--outSAMstrandField intronMotif',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/analysis/${meta.sample}/STAR/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: {"${params.outdir}/analysis/${meta.sample}/STAR/"},
                mode: params.publish_dir_mode,
                pattern: '*.bam'
            ],
            [
                path: { "${params.outdir}/analysis/${meta.sample}/STAR/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/analysis/${meta.id}/STAR/" },
            mode: params.publish_dir_mode,
            pattern: '*.bai',
            enabled: true
        ]
    }

    withName: SAMTOOLS_BAM2FQ {
        publishDir = [
            path: { "${params.outdir}/analysis/${meta.id}/umitools/dedup" },
            mode: params.publish_dir_mode,
            pattern: "*_{1,2}.{fq.gz,fastq.gz}",
            enabled: false
        ]
    }

    withName:UCSC_GTFTOGENEPRED {
        tag = { "${meta.id}" }
        ext.args = '-genePredExt -geneNameAsName2 -ignoreGroupsWithoutExons'
    }

    withName: PICARD_COLLECTRNASEQMETRICS {
        ext.args = { "--STRAND_SPECIFICITY ${meta.single_end || meta.strand == "forward" ? "FIRST_READ_TRANSCRIPTION_STRAND" : meta.strand == "reverse" ? "SECOND_READ_TRANSCRIPTION_STRAND" : "NONE" }" }
        publishDir = [
            path: { "${params.outdir}/${meta ? "analysis/" + meta.sample + "/" : "" }${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${task.process.tokenize(':')[-2].tokenize('_')[1].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PICARD_COLLECTHSMETRICS {
        publishDir = [
            path: { "${params.outdir}/${meta ? "analysis/" + meta.sample + "/" : "" }${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${task.process.tokenize(':')[-2].tokenize('_')[1].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'RSEQC_.*' {
        publishDir = [
            path: { "${params.outdir}/${meta ? "analysis/" + meta.sample + "/" : "" }${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${task.process.tokenize(':')[-3].tokenize('_')[1].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HTSEQ_COUNT {
        ext.args = { "-s ${meta.single_end || meta.strand == "forward" ? "yes" : meta.strand == "reverse" ? "reverse" : "no" } -r pos" }
        time     = { check_max( 20.h * task.attempt, 'time' ) }
    }

    withName: KALLISTO_QUANT {
        ext.prefix = { "$meta.sample" }
        ext.args = {
            [
                "--bias",
                "-b 100",
                meta.strand == "forward" ?
                    "--fr-stranded" :
                    (
                        meta.strand == "reverse" ?
                        "--rf-stranded" :
                        ""
                    )
            ].join(" ")
        }
        ext.fragment_len = params.kallisto_fragment_len
        ext.sd = params.kallisto_fragment_sd
    }

    withName: ARRIBA {
        ext.args = {
            [
                "-s ${meta.single_end || meta.strand == "forward" ? "yes" : meta.strand == "reverse" ? "reverse" : "no" }",
                "-b ${params.arriba_blacklist}",
                "-k ${params.arriba_known_fusions}",
                "-p ${params.arriba_protein_domains}"
            ].join(" ")
        }
    }

    withName: FUSIONCATCHER_DETECT {
        ext.args  = "--skip-blat"
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    }

}
