/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${meta ? "analysis/" + meta.id + "/" : "" }${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*:PREPARE_REFERENCES:.*' {
        publishDir = [
            path: { "${params.outdir}/references/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: UMITOOLS_EXTRACT {
        ext.args = {
            [
                "--bc-pattern=\"${meta.umi}\"",
                meta.umi2 == "" ? "" : "--bc-pattern2=\"${meta.umi2}\"",
                params.ignore_read_pair_suffixes ? "--ignore-read-pair-suffixes" : ""
            ].join(' ').trim()
        }
    }

    withName: STAR_GENOMEGENERATE {
        storeDir = { "${params.star_index}" }
    }

    withName: STARFUSION_DOWNLOAD {
        storeDir = { "${params.starfusion_reference}" }
    }

    withName: FUSIONCATCHER_DOWNLOAD {
        storeDir = { "${params.fusioncatcher_reference}" }
    }

    withName: STAR_FOR_ARRIBA {
        ext.args = [
            '--readFilesCommand zcat',
            '--outSAMtype BAM Unsorted',
            '--outSAMunmapped Within',
            '--outBAMcompression 0',
            '--outFilterMultimapNmax 50',
            '--peOverlapNbasesMin 10',
            '--alignSplicedMateMapLminOverLmate 0.5',
            '--alignSJstitchMismatchNmax 5',
            '-1 5 5',
            '--chimSegmentMin 10',
            '--chimOutType WithinBAM HardClip',
            '--chimJunctionOverhangMin 10',
            '--chimScoreDropMax 30',
            '--chimScoreJunctionNonGTAG 0',
            '--chimScoreSeparation 1',
            '--chimSegmentReadGapMax 3',
            '--chimMultimapNmax 50'
        ].join(' ').trim()
    }

    withName: STAR_FOR_STARFUSION {
        ext.args = '--readFilesCommand zcat --outSAMtype BAM Unsorted --outReadsUnmapped None --twopassMode Basic --outSAMstrandField intronMotif --outSAMunmapped Within --chimSegmentMin 12 --chimJunctionOverhangMin 8 --chimOutJunctionFormat 1 --alignSJDBoverhangMin 10 --alignMatesGapMax 100000 --alignIntronMax 100000 --alignSJstitchMismatchNmax 5 -1 5 5 --chimMultimapScoreRange 3 --chimScoreJunctionNonGTAG -4 --chimMultimapNmax 20 --chimNonchimScoreDropMin 10 --peOverlapNbasesMin 12 --peOverlapMMp 0.1 --alignInsertionFlush Right --alignSplicedMateMapLminOverLmate 0 --alignSplicedMateMapLmin 30'
    }

    withName: STAR_ALIGN {
        ext.args = [
            '--quantMode GeneCounts',
            '--twopassMode Basic',
            '--outSAMtype BAM SortedByCoordinate',
            '--readFilesCommand zcat',
            '--runRNGseed 0',
            '--outFilterMultimapNmax 20',
            '--alignSJDBoverhangMin 1',
            '--outSAMattributes NH HI AS NM MD',
            '--quantTranscriptomeBan Singleend',
            '--outSAMstrandField intronMotif',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/analysis/${meta.id}/STAR/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/analysis/${meta.id}/STAR" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/analysis/${meta.id}/STAR/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }

    withName:UCSC_GTFTOGENEPRED {
        ext.args = '-genePredExt -geneNameAsName2 -ignoreGroupsWithoutExons'
    }

    withName: PICARD_COLLECTRNASEQMETRICS {
        ext.args = { "--STRAND_SPECIFICITY ${meta.single_end || meta.strand == "forward" ? "FIRST_READ_TRANSCRIPTION_STRAND" : meta.strand == "reverse" ? "SECOND_READ_TRANSCRIPTION_STRAND" : "NONE" }" }
    }

    withName: HTSEQ_COUNT {
        ext.args = { "-s ${meta.single_end || meta.strand == "forward" ? "yes" : meta.strand == "reverse" ? "reverse" : "no" }" }
    }

    withName: ARRIBA {
        ext.args = { "-s ${meta.single_end || meta.strand == "forward" ? "yes" : meta.strand == "reverse" ? "reverse" : "no" }" }
    }

    withName: FUSIONCATCHER_DETECT {
        ext.args  = "--skip-blat"
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    }

}
